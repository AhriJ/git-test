{
  "inode": {
    "org": "",
    "id": "cmdb_workflow-imintb771kih",
    "schema_id": "cmdb_schema_workflow-0",
    "name": "[Agent管理] 监听 Agent 首次上报并同步到「CMP 服务器模型」",
    "namespace": "/Agent管理/服务器同步",
    "descr": "",
    "ctime": 0,
    "mtime": 0,
    "creator": "",
    "last_editor": "",
    "archived": false,
    "lock": ""
  },
  "data": {
    "icon": "",
    "nodes": [
      {
        "name": "__START__",
        "component": "cmdb_component-vars",
        "descr": "自定义表单",
        "auto_run": true,
        "settings": {},
        "config": {}
      },
      {
        "name": "__END__",
        "component": "cmdb_component-vars",
        "descr": "自定义表单",
        "auto_run": true,
        "settings": {},
        "config": {}
      },
      {
        "name": "script",
        "component": "cmdb_component-interpreter_ecmascript_v2",
        "descr": "新版 ES2015 解析组件",
        "auto_run": true,
        "settings": {},
        "config": {
          "timeout_s": -1
        },
        "merge": {
          "enable": false
        },
        "inputs": {
          "*": {
            "script": "// WorkflowRuntimeContext 类型对象暴露 workflow 运行时方法\nvar ctx = new WorkflowRuntimeContext()\nvar input = ctx.input() // 获取input数据\n\n// -------------- 常量 ------------\nvar SCHEMA_CMP_RESOURCE_SERVER = \"cmdb_schema_x-3bn8no4n0zd71\"\n\n// 用户配置\nvar SERVER_TYPE_CLOUD_SERVER = \"云主机\"\n\n// 用于同步的索引\nvar INDEX_EXTERNAL_ID = \"cmdb_index-external_id\"\n\n// 带外信息\nvar INDEX_OB_ID = \"cmdb_index-2m0a8cdlkeajw\"\nvar INDEX_OB_INSTANCE_TYPE = \"cmdb_index-dzm41ig72dbn\"\nvar INDEX_OB_PRODUCT = \"cmdb_index-3jvclg63itz7m\"\nvar INDEX_VENDOR = \"cmdb_index-vendor\"\nvar INDEX_REGION = \"cmdb_index-1xiozej60zk1l\"\n\n// 生命周期信息\nvar INDEX_STATUS = \"cmdb_index-status\"\nvar INDEX_CREATION_TIME = \"cmdb_index-1puskjh9jltjw\"\nvar INDEX_AGENT_STATUS = \"cmdb_index-agent_status\"\n\n// 主机信息\nvar INDEX_OS_TYPE = \"cmdb_index-26mgotsn8v2tg\"\nvar INDEX_INNER_IP = \"cmdb_index-2c3gcau1bnk85\"\nvar INDEX_PUBLIC_IP = \"cmdb_index-xgm9kh3lu3mg\"\nvar INDEX_SERVER_TYPE = \"cmdb_index-y0cucwrj1yoo\"\n\n// 关联对象\nvar INDEX_AGENT_SERVER = 'cmdb_index-system_server' // 关联上报服务器\nvar INDEXE_CHAN_TO_SERVER = \"cmdb_index-server\"\n\n// 创建的服务器多久未上报设置为 stop 单位为秒\nvar CREATING_EXPIRED = 600\n// agent 上报多久未更新设置为 stop 单位为秒\nvar AGENT_EXPIRED = 600\n\n\nvar serverEventPrefix = {\n    ns: \"SERVER\",\n    type: \"REPORT\",\n    id: \"FIRST_REPORT\",\n    prefix: 'cmdb_server-',\n}\n\nfunction syncProcess(id) {\n    var syncMarker = new Date().getTime();\n    var query = {\n        conditions: [\n            {\n                \"field\": \".inode.schema_id\",\n                \"op\": \"=\",\n                \"value\": \"cmdb_schema_server-0\"\n            },\n        ],\n        objects: [id],\n        selects: [\".\"],\n    }\n    var ret = ctx.ecu.cmdb.queryObjects(query)\n    var serverIds = (ret.objects || []).map(function (obj) {\n        return obj.inode.id;\n    });\n    var chanMap = {};\n    if (serverIds.length) {\n        var result = ctx.ecu.ql.queryQlTable({\n            conditions: [\n                {\n                    \"field\": \".inode.schema_id\",\n                    \"op\": \"=\",\n                    \"value\": \"cmdb_schema_server_chan-0\"\n                },\n                {\n                    \"field\": \".indexes.\" + INDEXE_CHAN_TO_SERVER,\n                    \"op\": \"=-\",\n                    \"value\": serverIds\n                }\n            ],\n            objects: [\"$conditions\"],\n            selects: [\".indexes.\" + INDEXE_CHAN_TO_SERVER],\n        });\n        chanMap = (result.rows || []).reduce(function (map, curr) {\n            map[curr.data[1]] = true\n            return map;\n        }, {});\n    }\n    ret \u0026\u0026 ret.objects.forEach(function (obj) {\n        var hostid = obj.indexes['cmdb_index-external_id'];\n        var cloudIdentity = obj.data.cloud_identity || {};\n        var provider = providerMap[cloudIdentity.provider];\n        var identity = cloudIdentity.instance_id || hostid || obj['data']['os']['real_host_id']\n        var netdevs = obj['data']['os']['networks']['netdevs']\n\n        var privateIps = []\n        var publicIps = []\n\n        netdevs \u0026\u0026 netdevs.forEach(function (netdev) {\n            var ip = netdev.addrs[0]\n            if (!ip) {\n                return\n            }\n            ip = ip.split(\"/\")[0]\n            if (ip == \"127.0.0.1\") {\n                return\n            }\n            if (IsLAN(ip)) {\n                privateIps.push(ip)\n            } else {\n                publicIps.push(ip)\n            }\n        })\n        var agent = obj.data.agent || {};\n        var server = {\n            inode: {\n                \"schema_id\": SCHEMA_CMP_RESOURCE_SERVER,\n                \"name\": obj.inode.name,\n            },\n            data: {\n                hostname: obj['data']['hostname'],\n                kernel: obj['data']['os']['kernel_ver'],\n                os: obj['data']['os']['os_dist'],\n                cpu: obj['data']['os']['cpu_core'],\n                memory: Math.floor(obj['data']['os']['mem_size'] / 1024 / 1024), // MB\n                agent_version: agent.version,\n                agent_level: agent.run_level \u0026\u0026 agent.run_level.current\n            },\n            indexes: {\n                \"cmdb_index-sync_marker\": syncMarker.toString(),\n                \"cmdb_index-external_id\": identity,\n            }\n        }\n        server.indexes[INDEX_AGENT_SERVER] = obj.inode.id\n        server.indexes[INDEX_STATUS] = \"RUNNING\"\n        server.indexes[INDEX_OS_TYPE] = obj['data']['os']['os_name'] == \"windows\" ? \"Windows\" : \"Linux\"\n\n        server.indexes[INDEX_INNER_IP] = privateIps\n        server.indexes[INDEX_PUBLIC_IP] = publicIps\n        // 上报超过把 agent 状态设置为停止\n        if (obj.inode.mtime \u003e= (syncMarker / 1000) - AGENT_EXPIRED) {\n            if (chanMap[obj.inode.id]) {\n                server.indexes[INDEX_AGENT_STATUS] = \"RUNNING\"\n            } else {\n                server.indexes[INDEX_AGENT_STATUS] = \"REPORTED\"\n            }\n        } else {\n            server.indexes[INDEX_AGENT_STATUS] = \"STOPED\"\n        }\n        var serialNumber\n        var productName\n        // 提取系统的 /sys/devices/virtual/dmi/id/product_serial 作为无法提取云商实例 id 时的更新条件\n        if (obj.data.dmi_info \u0026\u0026 obj.data.dmi_info.system) {\n            var system = obj.data.dmi_info.system;\n            for (var i = 0; i \u003c system.length; i++) {\n                serialNumber = system[i].serial_number;\n                productName = system[i].product_name;\n                if (serialNumber) {\n                    break\n                }\n            }\n        }\n        var updates = [\n            \".indexes.\" + INDEX_AGENT_SERVER,\n            \".indexes.\" + INDEX_OS_TYPE,\n            \".indexes.\" + INDEX_STATUS,\n            \".indexes.\" + INDEX_PUBLIC_IP,\n            \".indexes.\" + INDEX_INNER_IP,\n            \".indexes.\" + INDEX_OB_ID,\n            \".indexes.cmdb_index-sync_marker\",\n            \".indexes.\" + INDEX_AGENT_STATUS,\n            \".data.hostname\",\n            \".data.os\",\n            \".data.memory\",\n            \".data.kernel\",\n            \".data.cpu\",\n            \".data.agent_version\",\n            \".data.agent_level\"\n        ];\n        // 现在只适配阿里云的情况\n        var setSerialNumber = /alibaba|alicloud|ecs|ali/i.test(productName || \"\")\n        if (setSerialNumber \u0026\u0026 serialNumber) {\n            server.indexes[\"cmdb_index-serial_number\"] = serialNumber;\n            updates.push(\".indexes.cmdb_index-serial_number\");\n        }\n\n        if (provider) {\n            server.indexes[INDEX_VENDOR] = provider;\n            updates.push(\".indexes.\" + INDEX_VENDOR);\n        }\n\n        var ors = [\n            {\n                \"field\": \".indexes.\" + INDEX_AGENT_SERVER,\n                \"op\": \"=\",\n                \"value\": obj.inode.id\n            },\n            {\n                \"field\": \".indexes.cmdb_index-external_id\",\n                \"op\": \"=\",\n                \"value\": identity\n            }\n        ]\n        // 在未探测到云商标识且为特定云商的情况下才使用序列号进行更新\n        if (setSerialNumber \u0026\u0026 serialNumber \u0026\u0026 !provider) {\n            ors.push(\n                {\n                    \"field\": \".indexes.cmdb_index-serial_number\",\n                    \"op\": \"=\",\n                    \"value\": serialNumber\n                }\n            )\n        }\n        var query = {\n            conditions: [\n                {\n                    \"field\": \".inode.schema_id\",\n                    \"op\": \"=\",\n                    \"value\": SCHEMA_CMP_RESOURCE_SERVER\n                },\n                {\n                    \"field\": \"$or\",\n                    \"op\": \"=-\",\n                    \"value\": ors\n                }\n            ],\n            objects: [\"$conditions\"],\n            selects: [\".\"],\n        }\n\n        var ret = ctx.ecu.cmdb.updateObjects(query, {\n            object: server,\n            updates: updates\n        })\n\n        if (ret.update_count \u003c= 0) {\n            ctx.ecu.cmdb.createObjects([server])\n        }\n    })\n}\n\nctx.ecu.kvdb.watchPrefix(serverEventPrefix.ns, serverEventPrefix.id, serverEventPrefix.type, serverEventPrefix.prefix, null, function(msg) {\n    var agentServerId = msg.key\n    syncProcess(agentServerId)\n})"
          },
          "__START__": {
            "script": "// WorkflowRuntimeContext 类型对象暴露 workflow 运行时方法\nvar ctx = new WorkflowRuntimeContext()\nvar input = ctx.input() // 获取input数据\n\n// -------------- 常量 ------------\nvar SCHEMA_CMP_RESOURCE_SERVER = \"cmdb_schema_x-3bn8no4n0zd71\"\n\n// 用户配置\nvar SERVER_TYPE_CLOUD_SERVER = \"云主机\"\n\n// 用于同步的索引\nvar INDEX_EXTERNAL_ID = \"cmdb_index-external_id\"\n\n// 带外信息\nvar INDEX_OB_ID = \"cmdb_index-2m0a8cdlkeajw\"\nvar INDEX_OB_INSTANCE_TYPE = \"cmdb_index-dzm41ig72dbn\"\nvar INDEX_OB_PRODUCT = \"cmdb_index-3jvclg63itz7m\"\nvar INDEX_VENDOR = \"cmdb_index-vendor\"\nvar INDEX_REGION = \"cmdb_index-1xiozej60zk1l\"\n\n// 生命周期信息\nvar INDEX_STATUS = \"cmdb_index-status\"\nvar INDEX_CREATION_TIME = \"cmdb_index-1puskjh9jltjw\"\nvar INDEX_AGENT_STATUS = \"cmdb_index-agent_status\"\n\n// 主机信息\nvar INDEX_OS_TYPE = \"cmdb_index-26mgotsn8v2tg\"\nvar INDEX_INNER_IP = \"cmdb_index-2c3gcau1bnk85\"\nvar INDEX_PUBLIC_IP = \"cmdb_index-xgm9kh3lu3mg\"\nvar INDEX_SERVER_TYPE = \"cmdb_index-y0cucwrj1yoo\"\n\n// 关联对象\nvar INDEX_AGENT_SERVER = 'cmdb_index-system_server' // 关联上报服务器\nvar INDEXE_CHAN_TO_SERVER = \"cmdb_index-server\"\n\n// 创建的服务器多久未上报设置为 stop 单位为秒\nvar CREATING_EXPIRED = 600\n// agent 上报多久未更新设置为 stop 单位为秒\nvar AGENT_EXPIRED = 600\n\nvar ProviderMapping = {\n    \"azure\": \"cmdb_vendor-azure\",\n    \"tencentcloud\": \"cmdb_vendor-tencentcloud\",\n    \"aws\": \"cmdb_vendor-aws\",\n    \"alicloud\": \"cmdb_vendor-alicloud\"\n}\n\nvar serverEventPrefix = {\n    ns: \"SERVER\",\n    type: \"REPORT\",\n    id: \"FIRST_REPORT\",\n    prefix: 'cmdb_server-',\n}\n\nfunction IsLAN(ip) {\n    ip.toLowerCase();\n    if (ip == 'localhost') return true;\n    var a_ip = 0;\n    if (ip == \"\") return false;\n    var aNum = ip.split(\".\");\n    if (aNum.length != 4) return false;\n    a_ip += parseInt(aNum[0]) \u003c\u003c 24;\n    a_ip += parseInt(aNum[1]) \u003c\u003c 16;\n    a_ip += parseInt(aNum[2]) \u003c\u003c 8;\n    a_ip += parseInt(aNum[3]) \u003c\u003c 0;\n    a_ip = a_ip \u003e\u003e 16 \u0026 0xFFFF;\n    return (a_ip \u003e\u003e 8 == 0x7F || a_ip \u003e\u003e 8 == 0xA || a_ip == 0xC0A8 || (a_ip \u003e= 0xAC10 \u0026\u0026 a_ip \u003c= 0xAC1F));\n}\n\nfunction syncProcess(id) {\n    var syncMarker = new Date().getTime();\n    var query = {\n        conditions: [\n            {\n                \"field\": \".inode.schema_id\",\n                \"op\": \"=\",\n                \"value\": \"cmdb_schema_server-0\"\n            },\n        ],\n        objects: [id],\n        selects: [\n            \".inode\", \n            \".indexes\", \n            \".data.hostname\",\n            \".data.agent.version\",\n            \".data.agent.uptime\",\n            \".data.agent.local_config\",\n            \".data.agent.run_level\",\n            \".data.os.host_id\",\n            \".data.os.real_host_id\",\n            \".data.os.hostname\",\n            \".data.os.os_name\",\n            \".data.os.os_dist\",\n            \".data.os.os_dist_ver\",\n            \".data.os.kernel_ver\",\n            \".data.os.mem_size\",\n            \".data.os.cpu_core\",\n            \".data.os.time_offset_ms\",\n            \".data.os.networks\",\n            \".data.os.storage\",\n            \".data.update_time\",\n            \".data.cloud_identity\",\n            \".data.dmi_info\",\n        ],\n    }\n    var ret = ctx.ecu.cmdb.queryObjects(query)\n    var serverIds = (ret.objects || []).map(function (obj) {\n        return obj.inode.id;\n    });\n    var chanMap = {};\n    if (serverIds.length) {\n        var result = ctx.ecu.ql.queryQlTable({\n            conditions: [\n                {\n                    \"field\": \".inode.schema_id\",\n                    \"op\": \"=\",\n                    \"value\": \"cmdb_schema_server_chan-0\"\n                },\n                {\n                    \"field\": \".indexes.\" + INDEXE_CHAN_TO_SERVER,\n                    \"op\": \"=-\",\n                    \"value\": serverIds\n                }\n            ],\n            objects: [\"$conditions\"],\n            selects: [\".indexes.\" + INDEXE_CHAN_TO_SERVER],\n        });\n        chanMap = (result.rows || []).reduce(function (map, curr) {\n            map[curr.data[1]] = true\n            return map;\n        }, {});\n    }\n    ret \u0026\u0026 ret.objects.forEach(function (obj) {\n        var hostid = obj.indexes['cmdb_index-external_id']\n        var cloudIdentity = obj.data.cloud_identity || {}\n        var provider = ProviderMapping[cloudIdentity.provider]\n        // 云实例特征ID，用于确认主机的唯一性\n        var identity = cloudIdentity.instance_id || hostid || obj['data']['os']['real_host_id']\n        var netdevs = obj['data']['os']['networks']['netdevs']\n\n        var privateIps = []\n        var publicIps = []\n\n        netdevs \u0026\u0026 netdevs.forEach(function (netdev) {\n            var ip = netdev.addrs[0]\n            if (!ip) {\n                return\n            }\n            ip = ip.split(\"/\")[0]\n            if (ip == \"127.0.0.1\") {\n                return\n            }\n            if (IsLAN(ip)) {\n                privateIps.push(ip)\n            } else {\n                publicIps.push(ip)\n            }\n        })\n        var agent = obj.data.agent || {};\n        var server = {\n            inode: {\n                \"schema_id\": SCHEMA_CMP_RESOURCE_SERVER,\n                \"name\": obj.inode.name,\n            },\n            data: {\n                hostname: obj['data']['hostname'],\n                kernel: obj['data']['os']['kernel_ver'],\n                os: obj['data']['os']['os_dist'],\n                cpu: obj['data']['os']['cpu_core'],\n                memory: Math.ceil(obj['data']['os']['mem_size'] / 1024 / 1024), // MB\n                agent_version: agent.version,\n                agent_level: agent.run_level \u0026\u0026 agent.run_level.current\n            },\n            indexes: {\n                \"cmdb_index-sync_marker\": syncMarker.toString(),\n                \"cmdb_index-external_id\": identity,\n            }\n        }\n        server.indexes[INDEX_AGENT_SERVER] = obj.inode.id\n        server.indexes[INDEX_STATUS] = \"RUNNING\"\n        server.indexes[INDEX_OS_TYPE] = obj['data']['os']['os_name'] == \"windows\" ? \"Windows\" : \"Linux\"\n        server.indexes[INDEX_INNER_IP] = privateIps\n        server.indexes[INDEX_PUBLIC_IP] = publicIps\n\n        // 1. 上报超过把 agent 状态设置为停止\n        if (obj.inode.mtime \u003e= (syncMarker / 1000) - AGENT_EXPIRED) {\n            if (chanMap[obj.inode.id]) {\n                server.indexes[INDEX_AGENT_STATUS] = \"RUNNING\"\n            } else {\n                server.indexes[INDEX_AGENT_STATUS] = \"REPORTED\"\n            }\n        } else {\n            server.indexes[INDEX_AGENT_STATUS] = \"STOPED\"\n        }\n        // 2. 设置产品相关实例信息\n        var serialNumber\n        var productName\n        // 提取系统的 /sys/devices/virtual/dmi/id/product_serial 作为无法提取云商实例 id 时的更新条件\n        if (obj.data.dmi_info \u0026\u0026 obj.data.dmi_info.system) {\n            var system = obj.data.dmi_info.system;\n            for (var i = 0; i \u003c system.length; i++) {\n                serialNumber = system[i].serial_number;\n                productName = system[i].product_name;\n                if (serialNumber) {\n                    break\n                }\n            }\n        }\n        var updates = [\n            \".indexes.\" + INDEX_AGENT_SERVER,\n            \".indexes.\" + INDEX_OS_TYPE,\n            \".indexes.\" + INDEX_STATUS,\n            \".indexes.\" + INDEX_PUBLIC_IP,\n            \".indexes.\" + INDEX_INNER_IP,\n            \".indexes.\" + INDEX_OB_ID,\n            \".indexes.cmdb_index-sync_marker\",\n            \".indexes.\" + INDEX_AGENT_STATUS,\n            \".data.hostname\",\n            \".data.os\",\n            \".data.memory\",\n            \".data.kernel\",\n            \".data.cpu\",\n            \".data.agent_version\",\n            \".data.agent_level\"\n        ];\n        // 现在只适配阿里云的情况\n        var setSerialNumber = /alibaba|alicloud|ecs|ali/i.test(productName || \"\")\n        if (setSerialNumber \u0026\u0026 serialNumber) {\n            server.indexes[\"cmdb_index-serial_number\"] = serialNumber;\n            updates.push(\".indexes.cmdb_index-serial_number\");\n        }\n        if (provider) {\n            server.indexes[INDEX_VENDOR] = provider;\n            updates.push(\".indexes.\" + INDEX_VENDOR);\n        }\n\n        if(!provider \u0026\u0026 !setSerialNumber) {\n            server.indexes[INDEX_SERVER_TYPE] = \"虚拟机\"\n            updates.push(\".indexes.\" + INDEX_SERVER_TYPE)\n        } else {\n            server.indexes[INDEX_SERVER_TYPE] = \"云主机\"\n            updates.push(\".indexes.\" + INDEX_SERVER_TYPE)\n        }\n\n        var ors = [\n            {\n                \"field\": \".indexes.\" + INDEX_AGENT_SERVER,\n                \"op\": \"=\",\n                \"value\": obj.inode.id\n            },\n            {\n                \"field\": \".indexes.cmdb_index-external_id\",\n                \"op\": \"=\",\n                \"value\": identity\n            }\n        ]\n        // NOTE: 在未探测到云商标识且为特定云商的情况下才使用序列号进行更新\n        if (setSerialNumber \u0026\u0026 serialNumber \u0026\u0026 !provider) {\n            ors.push(\n                {\n                    \"field\": \".indexes.cmdb_index-serial_number\",\n                    \"op\": \"=\",\n                    \"value\": serialNumber\n                }\n            )\n        }\n        var query = {\n            conditions: [\n                {\n                    \"field\": \".inode.schema_id\",\n                    \"op\": \"=\",\n                    \"value\": SCHEMA_CMP_RESOURCE_SERVER\n                },\n                {\n                    \"field\": \"$or\",\n                    \"op\": \"=-\",\n                    \"value\": ors\n                }\n            ],\n            objects: [\"$conditions\"],\n            selects: [\".\"],\n        }\n\n        // 3. 进行更新或创建操作\n        var ret = ctx.ecu.cmdb.updateObjects(query, {\n            object: server,\n            updates: updates\n        })\n\n        if (ret.update_count \u003c= 0) {\n            ctx.ecu.cmdb.createObjects([server])\n        }\n    })\n}\n\nctx.ecu.kvdb.watchPrefix(serverEventPrefix.ns, serverEventPrefix.id, serverEventPrefix.type, serverEventPrefix.prefix, null, function(msg) {\n    try {\n    syncProcess(msg.key)\n    ctx.ecu.kvdb.batchWriteKeyValue(\"MCOP\", [{\n        type:  \"AGENT_SERVER\",\n        id:  \"FIRST_REPORT\",\n        key: msg.key,\n        value: \"\",\n    }])\n    }catch(e){}\n})"
          },
          "": {
            "script": "// WorkflowRuntimeContext 类型对象暴露 workflow 运行时方法\nvar ctx = new WorkflowRuntimeContext()\nvar input = ctx.input() // 获取input数据\n// ctx.output({xxxx}) 输出\n"
          }
        }
      }
    ],
    "edges": [
      {
        "from": "__START__",
        "to": "script"
      },
      {
        "from": "script#failed",
        "to": "__END__"
      }
    ],
    "persist_level": "job_unit",
    "persist_retention": 3600
  },
  "indexes": {}
}